var _user$project$Main$viewForSnp = F2(
	function (bounds, snp) {
		return A2(
			_elm_lang$svg$Svg$circle,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$cx(
					_elm_lang$core$Basics$toString(
						A2(_elm_lang$core$Debug$log, 'x', snp.x))),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$cy(
						_elm_lang$core$Basics$toString(
							A2(_elm_lang$core$Debug$log, 'y', snp.y))),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('steelblue'),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _user$project$Main$chartHeight = 350;
var _user$project$Main$chartWidth = 500;
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$svg$Svg$rect,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('chart'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width(
					_elm_lang$core$Basics$toString(_user$project$Main$chartWidth)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$height(
						_elm_lang$core$Basics$toString(_user$project$Main$chartHeight)),
					_1: {ctor: '[]'}
				}
			}
		},
		A2(
			_elm_lang$core$List$map,
			_user$project$Main$viewForSnp(model.bounds),
			model.snps));
};
var _user$project$Main$getAndConvertFloat = F2(
	function (dictionary, key) {
		var _p0 = A2(_elm_lang$core$Dict$get, key, dictionary);
		if (_p0.ctor === 'Just') {
			var _p1 = _elm_lang$core$String$toFloat(_p0._0);
			if (_p1.ctor === 'Ok') {
				return _elm_lang$core$Maybe$Just(_p1._0);
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Main$getAndConvertInt = F2(
	function (dictionary, key) {
		var _p2 = A2(_elm_lang$core$Dict$get, key, dictionary);
		if (_p2.ctor === 'Just') {
			var _p3 = _elm_lang$core$String$toInt(_p2._0);
			if (_p3.ctor === 'Ok') {
				return _elm_lang$core$Maybe$Just(_p3._0);
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Main$query = _elm_lang$core$Native_Platform.incomingPort('query', _elm_lang$core$Json_Decode$string);
var _user$project$Main$bounds = _elm_lang$core$Native_Platform.incomingPort('bounds', _elm_lang$core$Json_Decode$string);
var _user$project$Main$Association = F4(
	function (a, b, c, d) {
		return {cohort: a, trait: b, population: c, pvalue: d};
	});
var _user$project$Main$Snp = F7(
	function (a, b, c, d, e, f, g) {
		return {name: a, chr: b, pos: c, paper: d, assoc: e, x: f, y: g};
	});
var _user$project$Main$decodeSnp = F2(
	function (bounds, snpDict) {
		var paper = A2(_user$project$Main$getAndConvertInt, snpDict, 'pubmed');
		var pval = A2(_user$project$Main$getAndConvertFloat, snpDict, 'pvalue');
		var cohort = A2(_elm_lang$core$Dict$get, 'cohort', snpDict);
		var pop = A2(_user$project$Main$getAndConvertInt, snpDict, 'size');
		var trait = A2(_elm_lang$core$Dict$get, 'trait', snpDict);
		var chr = A2(_user$project$Main$getAndConvertInt, snpDict, 'chr');
		var pos = A2(_user$project$Main$getAndConvertInt, snpDict, 'pos');
		var name = A2(_elm_lang$core$Dict$get, 'name', snpDict);
		var _p4 = {
			ctor: '_Tuple8',
			_0: A2(_elm_lang$core$Debug$log, 'name', name),
			_1: A2(_elm_lang$core$Debug$log, 'pos', pos),
			_2: chr,
			_3: trait,
			_4: pop,
			_5: cohort,
			_6: pval,
			_7: paper
		};
		if (((((((((_p4.ctor === '_Tuple8') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) && (_p4._3.ctor === 'Just')) && (_p4._4.ctor === 'Just')) && (_p4._5.ctor === 'Just')) && (_p4._6.ctor === 'Just')) && (_p4._7.ctor === 'Just')) {
			var _p6 = _p4._6._0;
			var _p5 = _p4._1._0;
			return _elm_lang$core$Maybe$Just(
				A7(
					_user$project$Main$Snp,
					_p4._0._0,
					_p4._2._0,
					_p5,
					_p4._7._0,
					A4(_user$project$Main$Association, _p4._5._0, _p4._3._0, _p4._4._0, _p6),
					_elm_lang$core$Basics$toFloat(_user$project$Main$chartWidth * _p5) / _elm_lang$core$Basics$toFloat(bounds.high - bounds.low),
					_elm_lang$core$Basics$toFloat(_user$project$Main$chartHeight) * (0 - A2(_elm_lang$core$Basics$logBase, 10, _p6))));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Main$decodeSnps = F2(
	function (str, bounds) {
		var _p7 = A2(
			_elm_lang$core$Json_Decode$decodeString,
			_elm_lang$core$Json_Decode$list(
				_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string)),
			A2(_elm_lang$core$Debug$log, 'snp', str));
		if (_p7.ctor === 'Ok') {
			return A2(
				_elm_lang$core$List$filterMap,
				_user$project$Main$decodeSnp(bounds),
				_p7._0);
		} else {
			return {ctor: '[]'};
		}
	});
var _user$project$Main$Bounds = F2(
	function (a, b) {
		return {low: a, high: b};
	});
var _user$project$Main$decodeBounds = function (str) {
	var _p8 = A2(
		_elm_lang$core$Json_Decode$decodeString,
		_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$int),
		str);
	if (_p8.ctor === 'Ok') {
		var _p10 = _p8._0;
		var _p9 = {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$Dict$get, 'low', _p10),
			_1: A2(_elm_lang$core$Dict$get, 'high', _p10)
		};
		if (((_p9.ctor === '_Tuple2') && (_p9._0.ctor === 'Just')) && (_p9._1.ctor === 'Just')) {
			return A2(_user$project$Main$Bounds, _p9._0._0, _p9._1._0);
		} else {
			return A2(_user$project$Main$Bounds, 0, 0);
		}
	} else {
		return A2(_user$project$Main$Bounds, 0, 0);
	}
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p11 = msg;
		switch (_p11.ctor) {
			case 'Display':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Detail':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'UpdateBounds':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							bounds: _user$project$Main$decodeBounds(_p11._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							snps: A2(_user$project$Main$decodeSnps, _p11._0, model.bounds)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$Model = F2(
	function (a, b) {
		return {snps: a, bounds: b};
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A2(
		_user$project$Main$Model,
		{ctor: '[]'},
		A2(_user$project$Main$Bounds, 0, 0)),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$UpdateBounds = function (a) {
	return {ctor: 'UpdateBounds', _0: a};
};
var _user$project$Main$UpdateSnps = function (a) {
	return {ctor: 'UpdateSnps', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Main$query(_user$project$Main$UpdateSnps),
			_1: {
				ctor: '::',
				_0: _user$project$Main$bounds(_user$project$Main$UpdateBounds),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
var _user$project$Main$Detail = function (a) {
	return {ctor: 'Detail', _0: a};
};
var _user$project$Main$Display = {ctor: 'Display'};
